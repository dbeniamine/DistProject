!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddSorted	SortedList.c	/^int AddSorted(void* e, SortedList l){$/;"	f	signature:(void* e, SortedList l)
AddSorted	SortedList.h	/^int AddSorted(void* e, SortedList l);$/;"	p	signature:(void* e, SortedList l)
Append	Fifo.c	/^void Append(void* e, Fifo f){$/;"	f	signature:(void* e, Fifo f)
Append	Fifo.h	/^void Append(void* e, Fifo f);$/;"	p	signature:(void* e, Fifo f)
BasicBroadcast	Broadcast.c	/^void BasicBroadcast(int id, Message m){$/;"	f	signature:(int id, Message m)
BasicBroadcast	Broadcast.h	/^void BasicBroadcast(int id, Message m);$/;"	p	signature:(int id, Message m)
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Wall -Werror -g$/;"	m
ComparatorFct	SortedList.h	/^typedef int(*ComparatorFct)(void *e1, void *e2);$/;"	t
CreateFifo	Fifo.c	/^Fifo CreateFifo(void){$/;"	f	signature:(void)
CreateFifo	Fifo.h	/^Fifo CreateFifo(void);$/;"	p	signature:(void)
Delete	SortedList.c	/^void Delete(SortedList l){$/;"	f	signature:(SortedList l)
Delete	SortedList.h	/^void Delete(SortedList l);$/;"	p	signature:(SortedList l)
DeleteFifo	Fifo.c	/^void DeleteFifo(Fifo f){$/;"	f	signature:(Fifo f)
DeleteFifo	Fifo.h	/^void DeleteFifo(Fifo f);$/;"	p	signature:(Fifo f)
Fifo	Fifo.h	/^}*Fifo;$/;"	t	typeref:struct:_Fifo
IPBroadcast	Broadcast.c	/^void IPBroadcast(int id, Message m){$/;"	f	signature:(int id, Message m)
IPBroadcast	Broadcast.h	/^void IPBroadcast(int id, Message m);$/;"	p	signature:(int id, Message m)
IsEmpty	Fifo.c	/^int IsEmpty(Fifo f){ $/;"	f	signature:(Fifo f)
IsEmpty	Fifo.h	/^int IsEmpty(Fifo f); $/;"	p	signature:(Fifo f)
LDFLAGS	Makefile	/^LDFLAGS=-lm$/;"	m
LaunchSimulation	Simulator.c	/^void LaunchSimulation(){$/;"	f
LaunchSimulation	Simulator.h	/^void LaunchSimulation(void);$/;"	p	signature:(void)
List	List.h	/^}*List;$/;"	t	typeref:struct:_List
Message	Message.h	/^}*Message;$/;"	t	typeref:struct:_Message
Node	Simulator.h	/^}Node;$/;"	t	typeref:struct:_Node
NodesFct	Simulator.h	/^typedef void(*NodesFct)(int id, Message m);$/;"	t
NumMsg	Broadcast.c	/^    NumberedMessage NumMsg;$/;"	l
NumberedMessage	Broadcast.c	/^}*NumberedMessage;$/;"	t	typeref:struct:_NumberedMessage	file:
NumberedMsgComp	Broadcast.c	/^int NumberedMsgComp(void *e1, void *e2){$/;"	f	signature:(void *e1, void *e2)
PipelineAckData_t	Broadcast.c	/^}*PipelineAckData_t;$/;"	t	typeref:struct:_PipleineAckData_t	file:
PipelineBroadcast	Broadcast.c	/^void PipelineBroadcast(int id, Message m){$/;"	f	signature:(int id, Message m)
PipelineBroadcast	Broadcast.h	/^void  PipelineBroadcast(int id, Message m);$/;"	p	signature:(int id, Message m)
Remove	SortedList.c	/^void* Remove(void *e,SortedList l){$/;"	f	signature:(void *e,SortedList l)
Remove	SortedList.h	/^void* Remove(void *e,SortedList l);$/;"	p	signature:(void *e,SortedList l)
RemoveFirst	SortedList.c	/^void* RemoveFirst(SortedList l){$/;"	f	signature:(SortedList l)
RemoveFirst	SortedList.h	/^void* RemoveFirst(SortedList l);$/;"	p	signature:(SortedList l)
RemoveHead	Fifo.c	/^void* RemoveHead(Fifo f){$/;"	f	signature:(Fifo f)
RemoveHead	Fifo.h	/^void* RemoveHead(Fifo f);$/;"	p	signature:(Fifo f)
Send	Simulator.c	/^int Send(Message m){$/;"	f	signature:(Message m)
Send	Simulator.h	/^int Send(Message m);$/;"	p	signature:(Message m)
Size	SortedList.c	/^int Size(SortedList l){$/;"	f	signature:(SortedList l)
Size	SortedList.h	/^int Size(SortedList l); $/;"	p	signature:(SortedList l)
SortedList	SortedList.h	/^}*SortedList;$/;"	t	typeref:struct:_SortedList
System	Simulator.c	/^}*System;$/;"	t	typeref:struct:_System	file:
TOBLatencyBroadcast	Broadcast.c	/^void TOBLatencyBroadcast(int id, Message m){$/;"	f	signature:(int id, Message m)
TOBLatencyBroadcast	Broadcast.h	/^void TOBLatencyBroadcast(int id, Message m);$/;"	p	signature:(int id, Message m)
TOBThroughputBroadcast	Broadcast.c	/^void TOBThroughputBroadcast(int id, Message m){$/;"	f	signature:(int id, Message m)
TOBThroughputBroadcast	Broadcast.h	/^void TOBThroughputBroadcast(int id, Message m);$/;"	p	signature:(int id, Message m)
TreeBroadcast	Broadcast.c	/^void TreeBroadcast(int id, Message m){$/;"	f	signature:(int id, Message m)
TreeBroadcast	Broadcast.h	/^void TreeBroadcast(int id, Message m);$/;"	p	signature:(int id, Message m)
_Fifo	Fifo.h	/^typedef struct _Fifo{$/;"	s
_Fifo::head	Fifo.h	/^  List head;          \/\/ Head of the fifo$/;"	m	struct:_Fifo	access:public
_Fifo::tail	Fifo.h	/^  List tail;          \/\/ Tail of the fifo$/;"	m	struct:_Fifo	access:public
_List	List.h	/^typedef struct _List{$/;"	s
_List::elt	List.h	/^  void* elt;          \/\/ Element of the current link$/;"	m	struct:_List	access:public
_List::next	List.h	/^  struct _List* next; \/\/ Pointer to the next link$/;"	m	struct:_List	typeref:struct:_List::_List	access:public
_Message	Message.h	/^typedef struct _Message{$/;"	s
_Message::msg	Message.h	/^  char *msg;  \/\/ Content of the message$/;"	m	struct:_Message	access:public
_Message::receiv	Message.h	/^  int receiv; \/\/ Destination address (-1 if ip multicast)$/;"	m	struct:_Message	access:public
_Message::sender	Message.h	/^  int sender; \/\/ Identifier of the sender (external event if -1)$/;"	m	struct:_Message	access:public
_Node	Simulator.h	/^typedef struct _Node{$/;"	s
_Node::data	Simulator.h	/^    void * data; \/* This structure is usefull if the $/;"	m	struct:_Node	access:public
_Node::eventsBuf	Simulator.h	/^    Fifo eventsBuf; \/\/ Event buffer (contains char*).$/;"	m	struct:_Node	access:public
_Node::receivBuf	Simulator.h	/^    Fifo receivBuf; \/\/ Reception buffer (contains Message).$/;"	m	struct:_Node	access:public
_Node::sendBuf	Simulator.h	/^    Fifo sendBuf;   \/\/ Send buffer (contains Message).$/;"	m	struct:_Node	access:public
_NumberedMessage	Broadcast.c	/^typedef struct _NumberedMessage{$/;"	s	file:
_NumberedMessage::clk	Broadcast.c	/^    int clk;            \/\/timestamp of the message$/;"	m	struct:_NumberedMessage	file:	access:public
_NumberedMessage::creator	Broadcast.c	/^    int creator;        \/\/Creator of the message$/;"	m	struct:_NumberedMessage	file:	access:public
_NumberedMessage::m	Broadcast.c	/^    Message m;          \/\/the message$/;"	m	struct:_NumberedMessage	file:	access:public
_NumberedMessage::waitForNbAck	Broadcast.c	/^    int waitForNbAck;   \/\/number of ack that we are stil waiting for$/;"	m	struct:_NumberedMessage	file:	access:public
_PipleineAckData_t	Broadcast.c	/^typedef struct _PipleineAckData_t{$/;"	s	file:
_PipleineAckData_t::clock	Broadcast.c	/^    int clock;          \/\/Logical clock$/;"	m	struct:_PipleineAckData_t	file:	access:public
_PipleineAckData_t::next	Broadcast.c	/^    int next;           \/\/Next node in the pipeline$/;"	m	struct:_PipleineAckData_t	file:	access:public
_PipleineAckData_t::pending	Broadcast.c	/^    SortedList pending; \/\/Sorted list of pending messages$/;"	m	struct:_PipleineAckData_t	file:	access:public
_PipleineAckData_t::pred	Broadcast.c	/^    int pred;           \/\/Previous node in the pipeline$/;"	m	struct:_PipleineAckData_t	file:	access:public
_SortedList	SortedList.h	/^typedef struct _SortedList{$/;"	s
_SortedList::comp	SortedList.h	/^    ComparatorFct comp;$/;"	m	struct:_SortedList	access:public
_SortedList::head	SortedList.h	/^    struct _List* head;  \/\/head of the list$/;"	m	struct:_SortedList	typeref:struct:_SortedList::_List	access:public
_SortedList::size	SortedList.h	/^    int size;               \/\/size of the list$/;"	m	struct:_SortedList	access:public
_System	Simulator.c	/^typedef struct _System{$/;"	s	file:
_System::fun	Simulator.c	/^  void(*fun)(int id, Message m); \/\/ Function$/;"	m	struct:_System	file:	access:public
_System::nb_nodes	Simulator.c	/^  int nb_nodes;     \/\/ Number of nodes.$/;"	m	struct:_System	file:	access:public
_System::nb_rounds	Simulator.c	/^  int nb_rounds;    \/\/ Number of rounds to simulate.$/;"	m	struct:_System	file:	access:public
_System::nodes	Simulator.c	/^  Node* nodes;      \/\/ The nodes (process).$/;"	m	struct:_System	file:	access:public
__Fifo_H__	Fifo.h	7;"	d
__List_H__	List.h	7;"	d
__MESSAGE_H__	Message.h	8;"	d
__SIMULATOR_H__	Simulator.h	7;"	d
__SortedList_H__	SortedList.h	7;"	d
argSize	Broadcast.c	/^    int argSize;$/;"	l
bread	Simulator.c	/^  size_t bread, nbyte = 0;$/;"	l
broadcaster	Broadcast.c	/^    int neighbor, broadcaster;$/;"	l
buf	Simulator.c	/^  char *buf;$/;"	l
clk	Broadcast.c	/^    int clk;            \/\/timestamp of the message$/;"	m	struct:_NumberedMessage	file:	access:public
clock	Broadcast.c	/^    int clock;          \/\/Logical clock$/;"	m	struct:_PipleineAckData_t	file:	access:public
comp	SortedList.h	/^    ComparatorFct comp;$/;"	m	struct:_SortedList	access:public
content	Broadcast.c	/^    char* content;$/;"	l
copyMessage	Message.c	/^Message copyMessage(Message msg){$/;"	f	signature:(Message msg)
copyMessage	Message.h	/^Message copyMessage(Message msg);$/;"	p	signature:(Message msg)
creator	Broadcast.c	/^    int creator;        \/\/Creator of the message$/;"	m	struct:_NumberedMessage	file:	access:public
current	SortedList.c	/^    List current, prec;$/;"	l
data	Broadcast.c	/^    PipelineAckData_t data;$/;"	l
data	Simulator.h	/^    void * data; \/* This structure is usefull if the $/;"	m	struct:_Node	access:public
deleteMessage	Message.c	/^void deleteMessage(Message msg){$/;"	f	signature:(Message msg)
deleteMessage	Message.h	/^void deleteMessage(Message msg);$/;"	p	signature:(Message msg)
deleteSystem	Simulator.c	/^void deleteSystem(){$/;"	f
deleteSystem	Simulator.h	/^void deleteSystem(void);$/;"	p	signature:(void)
display_help	Main.c	/^void display_help(FILE* output, char* pname){$/;"	f	signature:(FILE* output, char* pname)
elt	Fifo.c	/^  void* elt;$/;"	l
elt	List.h	/^  void* elt;          \/\/ Element of the current link$/;"	m	struct:_List	access:public
event	Broadcast.c	/^    char *event, *eventArg, *msgTxt, *tmp, tmp1;$/;"	l
event	Broadcast.c	/^    char* event;$/;"	l
eventArg	Broadcast.c	/^    char *event, *eventArg, *msgTxt, *tmp, tmp1;$/;"	l
eventsBuf	Simulator.h	/^    Fifo eventsBuf; \/\/ Event buffer (contains char*).$/;"	m	struct:_Node	access:public
ex_event	Simulator.c	/^  char* ex_event = NULL;$/;"	l
f	Fifo.c	/^  Fifo f = malloc(sizeof(struct _Fifo));$/;"	l
f	Main.c	/^  NodesFct f = IPBroadcast;$/;"	l
fun	Simulator.c	/^  void(*fun)(int id, Message m); \/\/ Function$/;"	m	struct:_System	file:	access:public
fwd	Broadcast.c	/^    Message msg, fwd;$/;"	l
getData	Simulator.c	/^void *getData(int id){$/;"	f	signature:(int id)
getData	Simulator.h	/^void *getData(int id);$/;"	p	signature:(int id)
getNbNodes	Simulator.c	/^int getNbNodes(){$/;"	f
getNbNodes	Simulator.h	/^int getNbNodes(void);$/;"	p	signature:(void)
getNextExternalEvent	Simulator.c	/^char *getNextExternalEvent(int id){$/;"	f	signature:(int id)
getNextExternalEvent	Simulator.h	/^char *getNextExternalEvent(int id);$/;"	p	signature:(int id)
head	Fifo.h	/^  List head;          \/\/ Head of the fifo$/;"	m	struct:_Fifo	access:public
head	SortedList.h	/^    struct _List* head;  \/\/head of the list$/;"	m	struct:_SortedList	typeref:struct:_SortedList::_List	access:public
i	Broadcast.c	/^    int i;$/;"	l
i	Simulator.c	/^  int i, j, k;$/;"	l
i	Simulator.c	/^  int i;$/;"	l
initMessage	Message.c	/^Message initMessage(const char* str, int snd, int rcv){$/;"	f	signature:(const char* str, int snd, int rcv)
initMessage	Message.h	/^Message initMessage(const char* str, int snd, int rcv);$/;"	p	signature:(const char* str, int snd, int rcv)
initSystem	Simulator.c	/^void initSystem(int nb_nodes, int nb_rounds, NodesFct fun){$/;"	f	signature:(int nb_nodes, int nb_rounds, NodesFct fun)
initSystem	Simulator.h	/^void initSystem(int nb_nodes, int nb_rounds, NodesFct fun);$/;"	p	signature:(int nb_nodes, int nb_rounds, NodesFct fun)
j	Simulator.c	/^  int i, j, k;$/;"	l
k	Simulator.c	/^  int i, j, k;$/;"	l
l	SortedList.c	/^    SortedList l=malloc(sizeof(struct _SortedList));$/;"	l
len	Message.c	/^  int len = strlen(str) + 1;$/;"	l
m	Broadcast.c	/^    Message m;          \/\/the message$/;"	m	struct:_NumberedMessage	file:	access:public
m1	Broadcast.c	/^    NumberedMessage m1=(NumberedMessage)e1, m2=(NumberedMessage)e2;$/;"	l
m2	Broadcast.c	/^    NumberedMessage m1=(NumberedMessage)e1, m2=(NumberedMessage)e2;$/;"	l
main	Main.c	/^int main (int argc, char **argv){$/;"	f	signature:(int argc, char **argv)
msg	Broadcast.c	/^    Message msg, fwd;$/;"	l
msg	Message.c	/^  Message msg = malloc(sizeof(struct _Message));$/;"	l
msg	Message.h	/^  char *msg;  \/\/ Content of the message$/;"	m	struct:_Message	access:public
msg	Simulator.c	/^  Message msg, msgBis;$/;"	l
msg	Simulator.c	/^  char* msg;$/;"	l
msgBis	Simulator.c	/^  Message msg, msgBis;$/;"	l
msgOut	Broadcast.c	/^    Message msgOut;$/;"	l
msgTxt	Broadcast.c	/^    char *event, *eventArg, *msgTxt, *tmp, tmp1;$/;"	l
nTurn	Broadcast.c	/^    int nTurn;$/;"	l
nb_match	Simulator.c	/^  int nb_match;$/;"	l
nb_nodes	Main.c	/^  int nb_nodes = 4;$/;"	l
nb_nodes	Simulator.c	/^  int nb_nodes;     \/\/ Number of nodes.$/;"	m	struct:_System	file:	access:public
nb_rounds	Main.c	/^  int nb_rounds = 20;$/;"	l
nb_rounds	Simulator.c	/^  int nb_rounds;    \/\/ Number of rounds to simulate.$/;"	m	struct:_System	file:	access:public
nbyte	Simulator.c	/^  size_t bread, nbyte = 0;$/;"	l
neighbor	Broadcast.c	/^    int neighbor, broadcaster;$/;"	l
new	Fifo.c	/^  List new = malloc(sizeof(struct _List));$/;"	l
new	SortedList.c	/^    List new=malloc(sizeof(struct _List));$/;"	l
newSortedList	SortedList.c	/^SortedList newSortedList(ComparatorFct comp){$/;"	f	signature:(ComparatorFct comp)
newSortedList	SortedList.h	/^SortedList newSortedList(ComparatorFct comp);$/;"	p	signature:(ComparatorFct comp)
next	Broadcast.c	/^    int next;           \/\/Next node in the pipeline$/;"	m	struct:_PipleineAckData_t	file:	access:public
next	List.h	/^  struct _List* next; \/\/ Pointer to the next link$/;"	m	struct:_List	typeref:struct:_List::_List	access:public
nodes	Simulator.c	/^  Node* nodes;      \/\/ The nodes (process).$/;"	m	struct:_System	file:	access:public
o	Fifo.c	/^  void *o;$/;"	l
old	Simulator.c	/^    void *old=sys->nodes[id].data;$/;"	l
opt	Main.c	/^  int opt;$/;"	l
pending	Broadcast.c	/^    SortedList pending; \/\/Sorted list of pending messages$/;"	m	struct:_PipleineAckData_t	file:	access:public
prec	SortedList.c	/^    List current, prec;$/;"	l
prec	SortedList.c	/^    List prec;$/;"	l
prec	SortedList.c	/^    List temp,prec=pred(e,l);$/;"	l
pred	Broadcast.c	/^    int pred;           \/\/Previous node in the pipeline$/;"	m	struct:_PipleineAckData_t	file:	access:public
pred	SortedList.c	/^List pred(void *e, SortedList l){$/;"	f	signature:(void *e, SortedList l)
readExternalEvents	Simulator.c	/^void readExternalEvents(){$/;"	f
readExternalEvents	Simulator.h	/^void readExternalEvents(void);$/;"	p	signature:(void)
receiv	Message.h	/^  int receiv; \/\/ Destination address (-1 if ip multicast)$/;"	m	struct:_Message	access:public
receivBuf	Simulator.h	/^    Fifo receivBuf; \/\/ Reception buffer (contains Message).$/;"	m	struct:_Node	access:public
receiver	Simulator.c	/^  int receiver;$/;"	l
ret	SortedList.c	/^    void * ret;$/;"	l
ret	SortedList.c	/^    void *ret;$/;"	l
sendBuf	Simulator.h	/^    Fifo sendBuf;   \/\/ Send buffer (contains Message).$/;"	m	struct:_Node	access:public
sender	Message.h	/^  int sender; \/\/ Identifier of the sender (external event if -1)$/;"	m	struct:_Message	access:public
setData	Simulator.c	/^void *setData(int id, void *data){$/;"	f	signature:(int id, void *data)
setData	Simulator.h	/^void *setData(int id,void *data);$/;"	p	signature:(int id,void *data)
size	SortedList.h	/^    int size;               \/\/size of the list$/;"	m	struct:_SortedList	access:public
sys	Simulator.c	/^static System sys;$/;"	v	file:
tail	Fifo.h	/^  List tail;          \/\/ Tail of the fifo$/;"	m	struct:_Fifo	access:public
temp	SortedList.c	/^    List temp,prec=pred(e,l);$/;"	l
tmp	Broadcast.c	/^    char *event, *eventArg, *msgTxt, *tmp, tmp1;$/;"	l
tmp	Fifo.c	/^  List tmp = f->head;$/;"	l
tmp	SortedList.c	/^    List tmp=l->head;$/;"	l
tmp	SortedList.c	/^    void *tmp;$/;"	l
tmp1	Broadcast.c	/^    char *event, *eventArg, *msgTxt, *tmp, tmp1;$/;"	l
waitForNbAck	Broadcast.c	/^    int waitForNbAck;   \/\/number of ack that we are stil waiting for$/;"	m	struct:_NumberedMessage	file:	access:public
