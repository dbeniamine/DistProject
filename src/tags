!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Append	Fifo.c	/^void Append(void* e, Fifo f){$/;"	f	signature:(void* e, Fifo f)
Append	Fifo.h	/^void Append(void* e, Fifo f);$/;"	p	signature:(void* e, Fifo f)
BasicBroadcast	Broadcast.c	/^void BasicBroadcast(int id, Message m){$/;"	f	signature:(int id, Message m)
BasicBroadcast	Broadcast.h	/^void BasicBroadcast(int id, Message m);$/;"	p	signature:(int id, Message m)
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Wall -Werror -g$/;"	m
CreateFifo	Fifo.c	/^Fifo CreateFifo(void){$/;"	f	signature:(void)
CreateFifo	Fifo.h	/^Fifo CreateFifo(void);$/;"	p	signature:(void)
DeleteFifo	Fifo.c	/^void DeleteFifo(Fifo f){$/;"	f	signature:(Fifo f)
DeleteFifo	Fifo.h	/^void DeleteFifo(Fifo f);$/;"	p	signature:(Fifo f)
Fifo	Fifo.h	/^}*Fifo;$/;"	t	typeref:struct:_Fifo
IPBroadcast	Broadcast.c	/^void IPBroadcast(int id, Message m){$/;"	f	signature:(int id, Message m)
IPBroadcast	Broadcast.h	/^void IPBroadcast(int id, Message m);$/;"	p	signature:(int id, Message m)
IsEmpty	Fifo.c	/^int IsEmpty(Fifo f){ $/;"	f	signature:(Fifo f)
IsEmpty	Fifo.h	/^int IsEmpty(Fifo f); $/;"	p	signature:(Fifo f)
LDFLAGS	Makefile	/^LDFLAGS=-lm$/;"	m
LaunchSimulation	Simulator.c	/^void LaunchSimulation(){$/;"	f
LaunchSimulation	Simulator.h	/^void LaunchSimulation();$/;"	p	signature:()
List	Fifo.h	/^}*List;$/;"	t	typeref:struct:_List
Message	Message.h	/^}*Message;$/;"	t	typeref:struct:_Message
Node	Simulator.h	/^}Node;$/;"	t	typeref:struct:_Node
NodesFct	Simulator.h	/^typedef void(*NodesFct)(int id, Message m);$/;"	t
PipelineBroadcast	Broadcast.c	/^void PipelineBroadcast(int id, Message m){$/;"	f	signature:(int id, Message m)
PipelineBroadcast	Broadcast.h	/^void  PipelineBroadcast(int id, Message m);$/;"	p	signature:(int id, Message m)
RemoveHead	Fifo.c	/^void* RemoveHead(Fifo f){$/;"	f	signature:(Fifo f)
RemoveHead	Fifo.h	/^void* RemoveHead(Fifo f);$/;"	p	signature:(Fifo f)
Send	Simulator.c	/^int Send(Message m){$/;"	f	signature:(Message m)
Send	Simulator.h	/^int Send(Message m);$/;"	p	signature:(Message m)
System	Simulator.h	/^}*System;$/;"	t	typeref:struct:_System
TOBLatencyBroadcast	Broadcast.c	/^void TOBLatencyBroadcast(int id, Message m){$/;"	f	signature:(int id, Message m)
TOBLatencyBroadcast	Broadcast.h	/^void TOBLatencyBroadcast(int id, Message m);$/;"	p	signature:(int id, Message m)
TOBThroughputBroadcast	Broadcast.c	/^void TOBThroughputBroadcast(int id, Message m){$/;"	f	signature:(int id, Message m)
TOBThroughputBroadcast	Broadcast.h	/^void TOBThroughputBroadcast(int id, Message m);$/;"	p	signature:(int id, Message m)
TreeBroadcast	Broadcast.c	/^void TreeBroadcast(int id, Message m){$/;"	f	signature:(int id, Message m)
TreeBroadcast	Broadcast.h	/^void TreeBroadcast(int id, Message m);$/;"	p	signature:(int id, Message m)
_Fifo	Fifo.h	/^typedef struct _Fifo{$/;"	s
_Fifo::head	Fifo.h	/^  List head;          \/\/ Head of the fifo$/;"	m	struct:_Fifo	access:public
_Fifo::tail	Fifo.h	/^  List tail;          \/\/ Tail of the fifo$/;"	m	struct:_Fifo	access:public
_List	Fifo.h	/^typedef struct _List{$/;"	s
_List::elt	Fifo.h	/^  void* elt;          \/\/ Element of the current link$/;"	m	struct:_List	access:public
_List::next	Fifo.h	/^  struct _List* next; \/\/ Pointer to the next link$/;"	m	struct:_List	typeref:struct:_List::_List	access:public
_Message	Message.h	/^typedef struct _Message{$/;"	s
_Message::msg	Message.h	/^  char *msg;  \/\/ Content of the message$/;"	m	struct:_Message	access:public
_Message::receiv	Message.h	/^  int receiv; \/\/ Destination address (-1 if ip multicast)$/;"	m	struct:_Message	access:public
_Message::sender	Message.h	/^  int sender; \/\/ Identifier of the sender (external event if -1)$/;"	m	struct:_Message	access:public
_Node	Simulator.h	/^typedef struct _Node{$/;"	s
_Node::eventsBuf	Simulator.h	/^    Fifo eventsBuf; \/\/ Event buffer (contains char*).$/;"	m	struct:_Node	access:public
_Node::receivBuf	Simulator.h	/^    Fifo receivBuf; \/\/ Reception buffer (contains Message).$/;"	m	struct:_Node	access:public
_Node::sendBuf	Simulator.h	/^    Fifo sendBuf;   \/\/ Send buffer (contains Message).$/;"	m	struct:_Node	access:public
_System	Simulator.h	/^typedef struct _System{$/;"	s
_System::fun	Simulator.h	/^  void(*fun)(int id, Message m); \/\/ Function$/;"	m	struct:_System	access:public
_System::nb_nodes	Simulator.h	/^  int nb_nodes;     \/\/ Number of nodes.$/;"	m	struct:_System	access:public
_System::nb_rounds	Simulator.h	/^  int nb_rounds;    \/\/ Number of rounds to simulate.$/;"	m	struct:_System	access:public
_System::nodes	Simulator.h	/^  Node* nodes;      \/\/ The nodes (process).$/;"	m	struct:_System	access:public
__Fifo_H__	Fifo.h	7;"	d
__MESSAGE_H__	Message.h	8;"	d
__SIMULATOR_H__	Simulator.h	7;"	d
bread	Simulator.c	/^  size_t bread, nbyte = 0;$/;"	l
broadcaster	Broadcast.c	/^  int neighbor, broadcaster;$/;"	l
buf	Simulator.c	/^  char *buf;$/;"	l
content	Broadcast.c	/^  char* content;$/;"	l
copyMessage	Message.c	/^Message copyMessage(Message msg){$/;"	f	signature:(Message msg)
copyMessage	Message.h	/^Message copyMessage(Message msg);$/;"	p	signature:(Message msg)
deleteMessage	Message.c	/^void deleteMessage(Message msg){$/;"	f	signature:(Message msg)
deleteMessage	Message.h	/^void deleteMessage(Message msg);$/;"	p	signature:(Message msg)
deleteSystem	Simulator.c	/^void deleteSystem(void){$/;"	f	signature:(void)
deleteSystem	Simulator.h	/^void deleteSystem();$/;"	p	signature:()
display_help	Main.c	/^void display_help(FILE* output, char* pname){$/;"	f	signature:(FILE* output, char* pname)
elt	Fifo.c	/^  void* elt;$/;"	l
elt	Fifo.h	/^  void* elt;          \/\/ Element of the current link$/;"	m	struct:_List	access:public
event	Broadcast.c	/^  char* event;$/;"	l
eventsBuf	Simulator.h	/^    Fifo eventsBuf; \/\/ Event buffer (contains char*).$/;"	m	struct:_Node	access:public
ex_event	Simulator.c	/^  char* ex_event = NULL;$/;"	l
f	Fifo.c	/^  Fifo f = malloc(sizeof(struct _Fifo));$/;"	l
f	Main.c	/^  NodesFct f = IPBroadcast;$/;"	l
fun	Simulator.h	/^  void(*fun)(int id, Message m); \/\/ Function$/;"	m	struct:_System	access:public
fwd	Broadcast.c	/^  Message msg, fwd;$/;"	l
getNbNodes	Simulator.c	/^int getNbNodes(){$/;"	f
getNbNodes	Simulator.h	/^int getNbNodes();$/;"	p	signature:()
getNextExternalEvent	Simulator.c	/^char *getNextExternalEvent(int id){$/;"	f	signature:(int id)
getNextExternalEvent	Simulator.h	/^char *getNextExternalEvent(int id);$/;"	p	signature:(int id)
head	Fifo.h	/^  List head;          \/\/ Head of the fifo$/;"	m	struct:_Fifo	access:public
i	Broadcast.c	/^  int i;$/;"	l
i	Simulator.c	/^  int i, j, k;$/;"	l
i	Simulator.c	/^  int i;$/;"	l
initMessage	Message.c	/^Message initMessage(const char* str, int snd, int rcv){$/;"	f	signature:(const char* str, int snd, int rcv)
initMessage	Message.h	/^Message initMessage(const char* str, int snd, int rcv);$/;"	p	signature:(const char* str, int snd, int rcv)
initSystem	Simulator.c	/^void initSystem(int nb_nodes, int nb_rounds, NodesFct fun){$/;"	f	signature:(int nb_nodes, int nb_rounds, NodesFct fun)
initSystem	Simulator.h	/^void initSystem(int nb_nodes, int nb_rounds, NodesFct fun);$/;"	p	signature:(int nb_nodes, int nb_rounds, NodesFct fun)
j	Simulator.c	/^  int i, j, k;$/;"	l
k	Simulator.c	/^  int i, j, k;$/;"	l
len	Message.c	/^  int len = strlen(str) + 1;$/;"	l
main	Main.c	/^int main (int argc, char **argv){$/;"	f	signature:(int argc, char **argv)
msg	Broadcast.c	/^  Message msg, fwd;$/;"	l
msg	Message.c	/^  Message msg = malloc(sizeof(struct _Message));$/;"	l
msg	Message.h	/^  char *msg;  \/\/ Content of the message$/;"	m	struct:_Message	access:public
msg	Simulator.c	/^  Message msg, msgBis;$/;"	l
msg	Simulator.c	/^  char* msg;$/;"	l
msgBis	Simulator.c	/^  Message msg, msgBis;$/;"	l
msgOut	Broadcast.c	/^  Message msgOut;$/;"	l
nTurn	Broadcast.c	/^  int nTurn;$/;"	l
nb_match	Simulator.c	/^  int nb_match;$/;"	l
nb_nodes	Main.c	/^  int nb_nodes = 4;$/;"	l
nb_nodes	Simulator.h	/^  int nb_nodes;     \/\/ Number of nodes.$/;"	m	struct:_System	access:public
nb_rounds	Main.c	/^  int nb_rounds = 20;$/;"	l
nb_rounds	Simulator.h	/^  int nb_rounds;    \/\/ Number of rounds to simulate.$/;"	m	struct:_System	access:public
nbyte	Simulator.c	/^  size_t bread, nbyte = 0;$/;"	l
neighbor	Broadcast.c	/^  int neighbor, broadcaster;$/;"	l
new	Fifo.c	/^  List new = malloc(sizeof(struct _List));$/;"	l
next	Fifo.h	/^  struct _List* next; \/\/ Pointer to the next link$/;"	m	struct:_List	typeref:struct:_List::_List	access:public
nodes	Simulator.h	/^  Node* nodes;      \/\/ The nodes (process).$/;"	m	struct:_System	access:public
o	Fifo.c	/^  void *o;$/;"	l
opt	Main.c	/^  int opt;$/;"	l
readExternalEvents	Simulator.c	/^void readExternalEvents(){$/;"	f
readExternalEvents	Simulator.h	/^void readExternalEvents();$/;"	p	signature:()
receiv	Message.h	/^  int receiv; \/\/ Destination address (-1 if ip multicast)$/;"	m	struct:_Message	access:public
receivBuf	Simulator.h	/^    Fifo receivBuf; \/\/ Reception buffer (contains Message).$/;"	m	struct:_Node	access:public
receiver	Simulator.c	/^  int receiver;$/;"	l
sendBuf	Simulator.h	/^    Fifo sendBuf;   \/\/ Send buffer (contains Message).$/;"	m	struct:_Node	access:public
sender	Message.h	/^  int sender; \/\/ Identifier of the sender (external event if -1)$/;"	m	struct:_Message	access:public
sys	Simulator.c	/^static System sys;$/;"	v	file:
tail	Fifo.h	/^  List tail;          \/\/ Tail of the fifo$/;"	m	struct:_Fifo	access:public
tmp	Fifo.c	/^  List tmp = f->head;$/;"	l
